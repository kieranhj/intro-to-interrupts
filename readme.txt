Intro to Interrupts on the BBC Micro (part #2)
Kieran Connell, vABUG Masterclass #2, 10/09/2020.
~~~




Goals
~~~
Play music in the background
Time sprite plot routines relative to the raster, to avoid flicker
Run any code that has to be regular / time critical
Change MODE or colour palette at specific points on the screen
Do something else whilst disk or tape is loading
Advanced graphics (CRTC) effects like Vertical Rupture
Stable raster…




System and User VIAs
~~~
See New Advanced User Guide, pp. 380 for details.
16 registers mapped into Sheila address space.

System VIA => &FE40 - &FE4F
User VIA   => &FE60 - &FE6F

Reg  System VIA  User VIA  Read                        Write
0    &FE40       &FE60     Output register B           Input register B
1    &FE41       &FE61     Output register A           Input register A
2    &FE42       &FE62     Data direction register B
3    &FE43       &FE63     Data direction register A
4    &FE44       &FE64     Timer 1 low-order latch     Timer 1 low-order counter
5    &FE45       &FE65     Timer 1 high-order counter
6    &FE46       &FE66     Timer 1 low-order latch
7    &FE47       &FE67     Timer 1 high-order latch
8    &FE48       &FE68     Timer 2 low-order latch     Timer 2 low-order counter
9    &FE49       &FE69     Timer 2 high-order counter
A    &FE4A       &FE6A     Shift register
B    &FE4B       &FE6B     Auxiliary control register
C    &FE4C       &FE6C     Peripheral control register
D    &FE4D       &FE6D     Interrupt flag register
E    &FE4E       &FE6E     Interrupt enable register
F    &FE4F       &FE6F     Same as register 1 but with no handshake (ORA/IRA)




System VIA
~~~

Interrupt enable register &FE4E - Reg 14
~~~
Bit 7 6 5 4 3 2 1 0
    | | | | | | | |
    | | | | | | | +------  CA2      <-- keyboard
    | | | | | | +--------  CA1      <-- vsync pulse from 6845 CRTC
    | | | | | +----------  Shift reg
    | | | | +------------  CB2      <-- light pen strobe from 6845 CRTC
    | | | +--------------  CB1      <-- ADC
    | | +----------------  Timer 2  <-- one-shot or pulse
    | +------------------  Timer 1  <-- one-shot or continuous
    +--------------------  Set (1) / clear (0)

E.g. disable all interrupts on System VIA:

    lda #&7F : sta &FE4E      ; A=%01111111

E.g. enable vsync and Timer 1 interrupts on System VIA:

    lda #&C2 : sta &FE4E      ; A=%11000010


Interrupt flag register &FE4D - Reg 13
~~~
Bit 7 6 5 4 3 2 1 0        Set by                Cleared by
    | | | | | | | |
    | | | | | | | +------  Key press             Read or write Reg 1
    | | | | | | +--------  Vsync pulse           Read or write Reg 1
    | | | | | +----------  8 bits shifted        Read or write Shift register
    | | | | +------------  EOC from ADC          Read or write Reg 0
    | | | +--------------  Light pen strobe      Read or write Reg 0
    | | +----------------  Time-out of Timer 2   Read Timer 2 low or write Timer 2 high
    | +------------------  Time-out of Timer 1   Read TImer 1 low or read Timer 1 high
    +--------------------  Any active interrupt  Clear all interrupts

E.g. check if Vsync occured on System VIA:

    lda &FE4D : and #&02      ; A=%00000010 if flag is set for vsync

E.g. clear Vsync interrupt flag on System VIA:

    lda #&02 : sta &FE4D      ; A=%00000010




Running code at Vsync
~~~
-> Play music in the background
-> Do something else whilst disk or tape is loading

Q. What is Vsync?
A. Pulse generated by the video chip that tells the TV electron beam to return to the top-left
   corner of the CRT.

Q. When does Vsync happen?
A. By default every 50Hz (20ms) after the visible portion of the screen has been displayed.

-> Look at vsync-example.asm




Running code on Timers
~~~
-> Run any code that has to be regular / time critical

Q. How regular?
A. 1MHz timers = 1,000,000 ticks a second
   => timer values are 16-bits = 65,535 max ticks ~= 0.066s max delay.

Q. What are 'continuous' (or 'free-run') and 'one-shot' timer ?
A. 'One-shot' timers stop counting after reaching 0.
   'Continuous' (or 'free-run') timers are reloaded with a new value from the _latch_ registers.
   Only Timer 1 can run in 'continuous' mode.
   Timer mode is set using the Auxiliary control register (Reg 11).
   See New Advanced User Guide pp 395.

E.g. set Timer 1 on System VIA to generate continuous interrupts:

    lda #&40 : sta &FE4B        ; A=%01000000 (Timer 1 control = continuous)

E.g. set Timer 1 on User VIA to one-shot mode:

    lda #&00 : sta &FE6B        ; A=%00000000 (TImer 1 control = one-shot)

-> Look at 100hz-example.asm




Setting up a Timer relative to Vsync
~~~
-> Time sprite plot routines relative to the raster, to avoid flicker
-> Change MODE or colour palette at specific points on the screen
-> Advanced graphics (CRTC) effects like Vertical Rupture

Set the Timer value in the Vsync interrupt handler.
Remembering that:

    Vsync position is usually at row 34/35.
    Vsync interrupt occurs 2 scanlines _after_ the pulse.
    There are 39 character rows per frame.

    One scanline is 64us and there are 8 scanlines oer character row.

    So Timer value = a delay until the end of the frame
                   - adjustment for Vsync pulse delay
                   + a delay until the desired scanline.

-> Look at screen-example.asm




Using System VIA without an IRQ handler
~~~
-> Stable raster…

